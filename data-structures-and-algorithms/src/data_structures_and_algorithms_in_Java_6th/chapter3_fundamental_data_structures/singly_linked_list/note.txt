- Linked list, which provides an alternative(thay thế) to an array-based structure.
- A linked list, in its simplest form, is a collection of nodes that collectively form a(cùng nhau tạo thành) linear sequence(chuỗi tuyến tính).
- In a singly linked list, each node stores a reference to an object that is an element of the sequence, as
    well as a reference to the next node of the list.
- A linked list’s representation relies on(dựa trên) the collaboration(sự cộng tác) of many objects.
- The linked list instance must keep a reference to the first node of the list, known as the head.
    Without an explicit reference to the head, there would be no way to locate that node (or indirectly, any others)
- The last node of the list is known as the tail. The tail of a list can be found by traversing the
    linked list— starting at the head and moving from one node to another by following each node’s next reference.
- We can identify the tail as the node having null as its next reference. This process is also known as link hopping or pointer hopping.
- An important property of a linked list is that it does not have a predetermined fixed size;
    it uses space proportional to its current number of elements(space có thể thay đổi theo số lượng phần tử).
    When using a singly linked list, we can easily insert an element at the head of the list
- Unfortunately, we cannot easily delete the last node of a singly linked list. Even if we maintain a tail reference
    directly to the last node of the list, we must be able to access the node before the last node in order to remove the last node.
    But we cannot reach the node before the tail by following next links from the tail. The only way to access this node
    is to start from the head of the list and search all the way through the list.
    But such a sequence of link-hopping operations could take a long time.
    If we want to support such an operation efficiently, we will need to make our list doubly linked